name: Create Release

on:
  push:
    tags: ['*']

permissions:
  contents: write

env:
  RELEASE_DIR: "GSE Generator"
  ASSETS_DIR: "assets"
  ZIP_TEMP_DIR: "7zip-temp"

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set environment variables
        run: |
          $tagName = $env:GITHUB_REF -replace 'refs/tags/', ''
          echo "TAG_NAME=$tagName" >> $env:GITHUB_ENV
          echo "RELEASE_ZIP=GSE.Generator-$tagName.zip" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Extract release notes
        run: |
          $releaseFile = "RELEASE_NOTES.md"
          $tagHeader = "# $env:TAG_NAME"
          $defaultNotes = "No release notes found for tag $env:TAG_NAME"
          
          if (Test-Path $releaseFile) {
            $lines = Get-Content $releaseFile
            $startIdx = -1
            
            for ($i = 0; $i -lt $lines.Length; $i++) {
              if ($lines[$i].Trim() -eq $tagHeader.Trim()) {
                $startIdx = $i + 1
                break
              }
            }
            
            if ($startIdx -ge 0) {
              $endIdx = $lines.Length
              for ($i = $startIdx; $i -lt $lines.Length; $i++) {
                if ($lines[$i] -match "^# ") {
                  $endIdx = $i
                  break
                }
              }
              
              # Extract the release notes content
              $releaseNotes = ($lines[$startIdx..($endIdx-1)] | Where-Object { $_ -ne $null -and $_.Trim() -ne "" }) -join "`n"
              if (-not $releaseNotes.Trim()) {
                $releaseNotes = $defaultNotes
              }
            } else {
              $releaseNotes = $defaultNotes
            }
          } else {
            $releaseNotes = $defaultNotes
          }
          
          # Use here-string with proper escaping
          $delimiter = "RELEASE_NOTES_EOF_$(Get-Random)"
          "RELEASE_NOTES<<$delimiter" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $releaseNotes | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $delimiter | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: Generate changelog URL
        run: |
          $tags = (git tag --sort=-v:refname)
          $currentIdx = [array]::IndexOf($tags, $env:TAG_NAME)
          $prevTag = if ($currentIdx -lt ($tags.Length - 1)) { $tags[$currentIdx + 1] } else { $env:TAG_NAME }
          $changelogUrl = "**Full Changelog**: https://github.com/0xNullPointers/GSE-Gen/compare/$prevTag...$env:TAG_NAME"
          
          # Use same delimiter approach for consistency
          $delimiter = "FINAL_NOTES_EOF_$(Get-Random)"
          "RELEASE_NOTES<<$delimiter" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $changelogUrl | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $env:RELEASE_NOTES | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $delimiter | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: Setup 7-Zip
        run: |
          $baseUrl = "https://7-zip.org"
          $defaultVersion = "2409"
          
          # Attempt to get latest version
          $version = try {
            (Invoke-WebRequest "$baseUrl/download.html" -UseBasicParsing).Content |
            Select-String "7-Zip (\d+\.\d+)" |
            ForEach-Object { $_.Matches[0].Groups[1].Value -replace '\.', '' } |
            Select-Object -First 1
          } catch { $defaultVersion }
          
          $zipUrl = "$baseUrl/a/7z$version-extra.7z"
          Write-Host "Downloading: $zipUrl"
          
          Invoke-WebRequest $zipUrl -OutFile "7zip-extra.7z"
          
          # Extract and organize
          if (Get-Command "7z" -ErrorAction SilentlyContinue) {
            7z x "7zip-extra.7z" -o"$env:ZIP_TEMP_DIR"
          }
          
          New-Item -Path "$env:ASSETS_DIR/7zip" -ItemType Directory -Force
          
          Get-ChildItem "$env:ZIP_TEMP_DIR" -Recurse -Include "7za.dll", "7za.exe" |
          ForEach-Object { Copy-Item $_.FullName -Destination "$env:ASSETS_DIR/7zip/" }
          
          # Cleanup
          Remove-Item @("$env:ZIP_TEMP_DIR", "7zip-extra.7z") -Recurse -Force -ErrorAction SilentlyContinue
          
          Write-Host "7-Zip files installed:"
          Get-ChildItem "$env:ASSETS_DIR/7zip"
        shell: pwsh

      - name: Package release assets
        run: |
          # Create release structure
          $releaseAssetsPath = "$env:RELEASE_DIR/$env:ASSETS_DIR"
          New-Item -Path $releaseAssetsPath -ItemType Directory -Force
          
          # Copy assets
          if (Test-Path $env:ASSETS_DIR) {
            Copy-Item "$env:ASSETS_DIR/*" -Destination $releaseAssetsPath -Recurse -Force
          }
          
          # Move launcher executable
          $launcherPath = "$releaseAssetsPath/Launcher.exe"
          if (Test-Path $launcherPath) {
            Move-Item $launcherPath -Destination "$env:RELEASE_DIR/GSE_Gen.exe"
          } else {
            Write-Warning "Launcher.exe not found at $launcherPath"
          }
          
          # Extract and integrate main distribution
          $mainDistZip = "dist/main_dist.zip"
          if (Test-Path $mainDistZip) {
            $tempExtract = "temp_extract"
            Expand-Archive $mainDistZip -DestinationPath $tempExtract
            Move-Item "$tempExtract/main.dist" -Destination $releaseAssetsPath
            Remove-Item $tempExtract -Recurse -Force
          } else {
            Write-Warning "main_dist.zip not found at $mainDistZip"
          }
          
          # Create final release package
          & 7z a -tzip -mx=9 "$env:RELEASE_ZIP" "$env:RELEASE_DIR\*"
          Write-Host "Created release package: $env:RELEASE_ZIP"
        shell: pwsh
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.TAG_NAME }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false
          files: ${{ env.RELEASE_ZIP }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}