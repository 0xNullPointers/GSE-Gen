name: Create Release

on:
  push:
    tags:
      - '*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set tag name
        id: tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Extract release notes
        id: extract_release_notes
        run: |
          # Extract the release notes
          if [ -f RELEASE_NOTES.md ]; then
            # Extract content between the current tag header and the next tag header
            RELEASE_NOTES=$(awk -v tag="# ${{ env.TAG_NAME }}" '
              BEGIN { found=0; } 
              $0 ~ "^# " { 
                if (found == 1) { exit; } 
                if ($0 == tag) { found=1; next; } 
              } 
              found == 1 { notes = notes $0 "\n" } 
              END { print notes }
            ' RELEASE_NOTES.md)
            
            # Create a multiline string for the GitHub environment
            echo 'RELEASE_NOTES<<EOF' >> $GITHUB_ENV
            echo "$RELEASE_NOTES" >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
            
            echo "has_notes=true" >> $GITHUB_OUTPUT
          else
            echo "has_notes=false" >> $GITHUB_OUTPUT
            echo "RELEASE_NOTES=No release notes found for tag ${{ env.TAG_NAME }}" >> $GITHUB_ENV
          fi

      - name: Get previous tag
        id: prev_tag
        run: |
          # Get the previous tag
          PREV_TAG=$(git tag --sort=-v:refname | grep -A 1 ${{ env.TAG_NAME }} | tail -n 1)
          if [ -z "$PREV_TAG" ]; then
            # If no previous tag, use the current tag (first release)
            PREV_TAG=${{ env.TAG_NAME }}
          fi
          echo "PREV_TAG=${PREV_TAG}" >> $GITHUB_ENV
          
          # Append changelog URL to release notes
          echo 'RELEASE_NOTES<<EOF' >> $GITHUB_ENV
          echo "**Full Changelog**: https://github.com/0xNullPointers/GSE-Gen/compare/${PREV_TAG}...${{ env.TAG_NAME }}" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "${{ env.RELEASE_NOTES }}" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Package Release Assets
        run: |
          # Create release directory
          mkdir -p "GSE Generator/assets"
          
          # Copy assets folder
          cp -r assets/* "GSE Generator/assets/" || true
          
          # Move Launcher.exe
          mv "GSE Generator/assets/Launcher.exe" "GSE Generator/GSE_Gen.exe" || echo "Launcher.exe not found"
          
          # Extract main.dist.zip and move it to assets
          if [ -f "dist/main_dist.zip" ]; then
            mkdir -p temp_extract
            unzip "dist/main_dist.zip" -d temp_extract
            mv temp_extract/main.dist "GSE Generator/assets/"
            rm -rf temp_extract
          else
            echo "main_dist.zip not found"
          fi
          
          # Create zip archive with tag version in name
          zip -9 -r "GSE.Generator-${{ env.TAG_NAME }}.zip" "GSE Generator"
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.TAG_NAME }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false
          files: GSE.Generator-${{ env.TAG_NAME }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 